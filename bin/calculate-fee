#!/usr/bin/env php
<?php

declare(strict_types=1);

use Lendable\Interview\DataTransferObject\Loan\LoanApplicationRequestDto;
use Lendable\Interview\Util\MoneyConverter;
use Lendable\Interview\Repository\Loan\Term\LoanTermDummyRepository;
use Lendable\Interview\Request\Loan\LoanApplicationRequest;
use Lendable\Interview\Service\Loan\Fee\LoanFeeCalculatorInterface;
use Lendable\Interview\Service\Loan\Fee\LoanFeeCalculatorService;
use Lendable\Interview\Service\Loan\Fee\LoanFeeInterpolatorService;

require_once dirname(__DIR__) . '/vendor/autoload.php';

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->safeLoad();

$minAmount = isset($_ENV['MIN_LOAN_AMOUNT']) ? (float) $_ENV['MIN_LOAN_AMOUNT'] : 1000.0;
$maxAmount = isset($_ENV['MAX_LOAN_AMOUNT']) ? (float) $_ENV['MAX_LOAN_AMOUNT'] : 20000.0;
$roundingInterval = isset($_ENV['FEE_ROUNDING_INTERVAL']) ? (int) $_ENV['FEE_ROUNDING_INTERVAL'] : 5;

/**
 * Please note that you CAN modify this file in any way to suit your needs, but be advised that it MUST conform to
 * the contract specified in the README of the test.
 */
try {
    $request = new LoanApplicationRequest(
        rawAmount: $argv[1] ?? null,
        rawTerm: $argv[2] ?? null,
        minAmount: $minAmount,
        maxAmount: $maxAmount,
    );

    $request->validate();

    // Create DTO
    $loanData = LoanApplicationRequestDto::fromArray($request->safe());

    // Execute calculator
    $calculator = getFeeCalculator($roundingInterval);
    $fee = $calculator->calculate($loanData);

    printf(
        "%s%s",
        number_format(MoneyConverter::toFloat($fee), 2),
        PHP_EOL
    ); // stdout

    exit(0);
} catch (Throwable $e) {
    fwrite(
        STDERR,
        sprintf(
            'Error: %s%s',
            $e->getMessage(),
            PHP_EOL
        )
    ); // stderr
    exit(1);
}

/**
 * @param int $roundingInterval
 * @return LoanFeeCalculatorInterface
 */
function getFeeCalculator(int $roundingInterval): LoanFeeCalculatorInterface
{
    return new LoanFeeCalculatorService(
        loanTermRepository: new LoanTermDummyRepository(),
        interpolator: new LoanFeeInterpolatorService(),
        roundingInterval: $roundingInterval
    );
}
